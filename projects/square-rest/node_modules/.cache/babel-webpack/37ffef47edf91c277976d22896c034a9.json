{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { getAuth, onAuthStateChanged, updateProfile } from 'firebase/auth';\nimport { Observable } from 'rxjs';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport * as i1 from '@angular/router';\nimport { getFirestore, doc, collection, setDoc, getDoc, updateDoc, deleteDoc, onSnapshot, getDocs } from 'firebase/firestore';\nimport 'firebase/compat/storage';\n\nclass AuthService {\n  onAuthStateChanged() {\n    // https://firebase.google.com/docs/auth/web/manage-users#get_the_currently_signed-in_user\n    return new Observable(subscriber => {\n      const auth = getAuth();\n      onAuthStateChanged(auth, user => subscriber.next(user), error => subscriber.error(error));\n    });\n  }\n\n  isAuth() {\n    return getAuth().currentUser != null;\n  }\n\n  signOut() {\n    return getAuth().signOut();\n  }\n\n  user() {\n    return getAuth().currentUser;\n  }\n\n  uid() {\n    const user = getAuth().currentUser;\n    return user ? user.uid : undefined;\n  }\n\n  updateProfile(profile) {\n    // https://firebase.google.com/docs/auth/web/manage-users#update_a_users_profile\n    const user = getAuth().currentUser;\n    if (!user) throw new Error(\"User not defined\");\n    return updateProfile(user, profile);\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)();\n};\n\nAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nclass AuthGuardService {\n  constructor(router) {\n    this.router = router;\n  }\n\n  canActivate() {\n    return new Promise((resolve, reject) => {\n      firebase.auth().onAuthStateChanged(user => {\n        if (user) {\n          resolve(true);\n        } else {\n          this.router.navigate(['/signin']);\n          resolve(false);\n        }\n      });\n    });\n  }\n\n}\n\nAuthGuardService.ɵfac = function AuthGuardService_Factory(t) {\n  return new (t || AuthGuardService)(i0.ɵɵinject(i1.Router));\n};\n\nAuthGuardService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthGuardService,\n  factory: AuthGuardService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthGuardService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Router\n    }];\n  }, null);\n})();\n\nclass FirestoreService {\n  constructor() {\n    this.db = getFirestore();\n  }\n  /** @see CRUDInterface.create */\n\n\n  create(entityName, data, pkName) {\n    return new Promise((resolve, reject) => {\n      // https://firebase.google.com/docs/firestore/manage-data/add-data#add_a_document\n      const newDoc = pkName && data[pkName] ? doc(this.db, entityName, data[pkName]) : doc(collection(this.db, entityName));\n      if (pkName && !data[pkName]) data[pkName] = newDoc.id;\n      const anyData = Object.assign({}, data);\n      setDoc(newDoc, anyData).then(() => resolve(newDoc.id), error => reject(error));\n    });\n  }\n  /** @see CRUDInterface.read */\n\n\n  read(entityName, key) {\n    return new Promise((resolve, reject) => {\n      // https://firebase.google.com/docs/firestore/query-data/get-data#get_a_document\n      const docRef = doc(this.db, entityName, key);\n      getDoc(docRef).then(docSnap => resolve(docSnap.data()), error => reject(error));\n    });\n  }\n  /** @see CRUDInterface.update */\n\n\n  update(entityName, key, data) {\n    // cf. https://newbedev.com/function-documentreference-set-called-with-invalid-data-unsupported-field-value-a-custom-budget-object\n    // Pour éviter l'ereur Function DocumentReference.set() called with invalid data. Data must be an object, but it was: a custom object\n    const anyData = Object.assign({}, data);\n    const docRef = doc(this.db, entityName, key);\n    return updateDoc(docRef, anyData);\n  }\n  /** @see CRUDInterface.delete */\n\n\n  delete(entityName, key) {\n    const docRef = doc(this.db, entityName, key);\n    return deleteDoc(docRef);\n  }\n  /** @see CRUDInterface.observe */\n\n\n  observe(entityName, key) {\n    return new Observable(subscriber => {\n      // https://firebase.google.com/docs/firestore/query-data/listen\n      const docRef = doc(this.db, entityName, key);\n      const unsub = onSnapshot(docRef, docSnap => subscriber.next(docSnap.data()), error => subscriber.error(error));\n    });\n  }\n\n  selectAll(entityName) {\n    // https://firebase.google.com/docs/firestore/query-data/get-data#get_all_documents_in_a_collection\n    return new Promise((resolve, reject) => {\n      const collRef = collection(this.db, entityName);\n      getDocs(collRef).then(querySnapshot => {\n        const docs = [];\n        querySnapshot.forEach(docSnap => docs.push(docSnap.data()));\n        resolve(docs);\n      }, error => reject(error));\n    });\n  }\n\n}\n\nFirestoreService.ɵfac = function FirestoreService_Factory(t) {\n  return new (t || FirestoreService)();\n};\n\nFirestoreService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FirestoreService,\n  factory: FirestoreService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FirestoreService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass StorageService {\n  /** @see StorageInterface.upload */\n  upload(file, progress) {\n    return new Promise((resolve, reject) => {\n      const currentUser = firebase.auth().currentUser;\n      if (!currentUser) reject(new Error(\"Unauthenticated user\"));else if (!file) reject(new Error(\"File undefined\"));else {\n        const uid = currentUser.uid;\n        const almostUniqueFileName = Date.now().toString();\n        const path = uid + '/' + almostUniqueFileName + file.name;\n        const upload = firebase.storage().ref(path).put(file);\n        /* firebase.storage.UploadTask */\n\n        upload.on(firebase.storage.TaskEvent.STATE_CHANGED, snapshot => {\n          progress(snapshot.bytesTransferred, snapshot.totalBytes);\n        }, error => reject(error), () => upload.snapshot.ref.getDownloadURL().then(url => resolve(url)));\n      }\n    });\n  }\n  /** @see StorageInterface.delete */\n\n\n  delete(url) {\n    const storageRef = firebase.storage().refFromURL(url);\n    return storageRef.delete();\n  }\n\n}\n\nStorageService.ɵfac = function StorageService_Factory(t) {\n  return new (t || StorageService)();\n};\n\nStorageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StorageService,\n  factory: StorageService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StorageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of square-firebase\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AuthGuardService, AuthService, FirestoreService, StorageService };","map":{"version":3,"sources":["C:\\Dev\\Angular\\square\\projects\\square-firebase\\src\\auth\\auth.service.ts","C:\\Dev\\Angular\\square\\projects\\square-firebase\\src\\auth\\auth-guard.service.ts","C:\\Dev\\Angular\\square\\projects\\square-firebase\\src\\database\\firestore.service.ts","C:\\Dev\\Angular\\square\\projects\\square-firebase\\src\\storage\\storage.service.ts","C:\\Dev\\Angular\\square\\projects\\square-firebase\\src\\public-api.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { getAuth, onAuthStateChanged, updateProfile, User } from 'firebase/auth';\r\nimport { Observable } from \"rxjs\";\r\nimport { ID } from \"../id.type\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  onAuthStateChanged(): Observable<User | null> {\r\n    // https://firebase.google.com/docs/auth/web/manage-users#get_the_currently_signed-in_user\r\n    return new Observable(subscriber => {\r\n      const auth = getAuth();\r\n      onAuthStateChanged(auth,\r\n        user => subscriber.next(user),\r\n        error => subscriber.error(error)\r\n      );\r\n    })\r\n  }\r\n\r\n  isAuth(): boolean {\r\n    return getAuth().currentUser != null;\r\n  }\r\n\r\n  signOut(): Promise<void> {\r\n    return getAuth().signOut();\r\n  }\r\n\r\n  user(): User | null {\r\n    return getAuth().currentUser;\r\n  }\r\n\r\n  uid(): ID | undefined {\r\n    const user = getAuth().currentUser;\r\n    return user ? user.uid : undefined;\r\n  }\r\n\r\n  updateProfile(profile: { displayName?: string | null; photoURL?: string | null; }): Promise<void> {\r\n    // https://firebase.google.com/docs/auth/web/manage-users#update_a_users_profile\r\n    const user = getAuth().currentUser;\r\n    if (!user)\r\n      throw (new Error(\"User not defined\"));\r\n    return updateProfile(user, profile);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AuthGuardService implements CanActivate {\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  canActivate(): Observable<boolean> | Promise<boolean> | boolean {\r\n    return new Promise(\r\n      (resolve, reject) => {\r\n        firebase.auth().onAuthStateChanged(\r\n          (user) => {\r\n            if (user) {\r\n              resolve(true);\r\n            } else {\r\n              this.router.navigate(['/signin']);\r\n              resolve(false);\r\n            }\r\n          }\r\n        );\r\n      }\r\n    );\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { collection, deleteDoc, doc, DocumentSnapshot, getDoc, getDocs, getFirestore, onSnapshot, QuerySnapshot, setDoc, updateDoc } from 'firebase/firestore';\r\nimport { Observable } from 'rxjs';\r\nimport { CRUDInterface } from 'square-database';\r\nimport { ID } from '../id.type';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FirestoreService implements CRUDInterface<ID> {\r\n  private db = getFirestore();\r\n\r\n  constructor() { }\r\n\r\n  /** @see CRUDInterface.create */\r\n  create(entityName: string, data: any, pkName?: string): Promise<ID> {\r\n    return new Promise((resolve, reject) => {\r\n      // https://firebase.google.com/docs/firestore/manage-data/add-data#add_a_document\r\n      const newDoc = (pkName && data[pkName]) ? doc(this.db, entityName, data[pkName]) : doc(collection(this.db, entityName));\r\n      if (pkName && !data[pkName])\r\n        data[pkName] = newDoc.id;\r\n\r\n      const anyData = Object.assign({}, data);\r\n      setDoc(newDoc, anyData).then(\r\n        () => resolve(newDoc.id),\r\n        (error: Error) => reject(error)\r\n      )\r\n    })\r\n  }\r\n\r\n  /** @see CRUDInterface.read */\r\n  read(entityName: string, key: ID): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      // https://firebase.google.com/docs/firestore/query-data/get-data#get_a_document\r\n      const docRef = doc(this.db, entityName, key);\r\n      getDoc(docRef).then(\r\n        (docSnap: DocumentSnapshot) => resolve(docSnap.data()),\r\n        (error: Error) => reject(error)\r\n      )\r\n    });\r\n  }\r\n\r\n  /** @see CRUDInterface.update */\r\n  update(entityName: string, key: ID, data: any): Promise<void> {\r\n    // cf. https://newbedev.com/function-documentreference-set-called-with-invalid-data-unsupported-field-value-a-custom-budget-object\r\n    // Pour éviter l'ereur Function DocumentReference.set() called with invalid data. Data must be an object, but it was: a custom object\r\n    const anyData = Object.assign({}, data);\r\n    const docRef = doc(this.db, entityName, key);\r\n    return updateDoc(docRef, anyData);\r\n  }\r\n\r\n  /** @see CRUDInterface.delete */\r\n  delete(entityName: string, key: ID): Promise<void> {\r\n    const docRef = doc(this.db, entityName, key);\r\n    return deleteDoc(docRef);\r\n  }\r\n\r\n  /** @see CRUDInterface.observe */\r\n  observe(entityName: string, key: ID): Observable<any> {\r\n    return new Observable(subscriber => {\r\n      // https://firebase.google.com/docs/firestore/query-data/listen\r\n      const docRef = doc(this.db, entityName, key);\r\n      const unsub = onSnapshot(docRef,\r\n        (docSnap: DocumentSnapshot) => subscriber.next(docSnap.data()),\r\n        (error: Error) => subscriber.error(error)\r\n      );\r\n    });\r\n  }\r\n\r\n  selectAll(entityName: string): Promise<any[]> {\r\n    // https://firebase.google.com/docs/firestore/query-data/get-data#get_all_documents_in_a_collection\r\n    return new Promise((resolve, reject) => {\r\n      const collRef = collection(this.db, entityName);\r\n      getDocs(collRef).then(\r\n        (querySnapshot: QuerySnapshot) => {\r\n          const docs: any[] = [];\r\n          querySnapshot.forEach(docSnap => docs.push(docSnap.data()));\r\n          resolve(docs);\r\n        },\r\n        (error: Error) => reject(error)\r\n      )\r\n    })\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/storage';\r\nimport { StorageInterface } from 'square-database';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StorageService implements StorageInterface {\r\n\r\n  /** @see StorageInterface.upload */\r\n  upload(file: File, progress: (transferred: number, total: number) => void): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const currentUser = firebase.auth().currentUser;\r\n      if (!currentUser)\r\n        reject(new Error(\"Unauthenticated user\"));\r\n\r\n      else if (!file)\r\n        reject(new Error(\"File undefined\"));\r\n\r\n      else {\r\n        const uid = currentUser.uid;\r\n        const almostUniqueFileName = Date.now().toString();\r\n        const path = uid + '/' + almostUniqueFileName + file.name;\r\n        const upload = firebase.storage().ref(path).put(file); /* firebase.storage.UploadTask */\r\n\r\n        upload.on(firebase.storage.TaskEvent.STATE_CHANGED,\r\n          (snapshot: firebase.storage.UploadTaskSnapshot) => {\r\n            progress(snapshot.bytesTransferred, snapshot.totalBytes)\r\n          },\r\n          (error) => reject(error),\r\n          () => upload.snapshot.ref.getDownloadURL().then(\r\n            (url: string) => resolve(url)\r\n          )\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @see StorageInterface.delete */\r\n  delete(url: string): Promise<void> {\r\n    const storageRef = firebase.storage().refFromURL(url);\r\n    return storageRef.delete();\r\n  }\r\n\r\n}\r\n","/*\r\n * Public API Surface of square-firebase\r\n */\r\n\r\nexport * from './auth/auth.service';\r\nexport * from './auth/auth-guard.service';\r\nexport * from './database/firestore.service';\r\n// export * from './database/realtime.service';\r\nexport * from './storage/storage.service';"]},"metadata":{},"sourceType":"module"}