{"ast":null,"code":"import _asyncToGenerator from \"C:/Dev/Angular/square/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n\n/**\r\n * Domain name for firebase storage.\r\n */\n\n\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\n\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\n\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\n\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\n\nclass StorageError extends FirebaseError {\n  /**\r\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   */\n  constructor(code, message) {\n    super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\n    /**\r\n     * Stores custom error data unque to StorageError.\r\n     */\n\n    this.customData = {\n      serverResponse: null\n    };\n    this._baseMessage = this.message; // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n  /**\r\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n   */\n\n\n  _codeEquals(code) {\n    return prependCode(code) === this.code;\n  }\n  /**\r\n   * Optional response message that was added by the server.\r\n   */\n\n\n  get serverResponse() {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse) {\n    this.customData.serverResponse = serverResponse;\n\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n\n}\n\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\n\nfunction unknown() {\n  const message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new StorageError(\"unknown\"\n  /* UNKNOWN */\n  , message);\n}\n\nfunction objectNotFound(path) {\n  return new StorageError(\"object-not-found\"\n  /* OBJECT_NOT_FOUND */\n  , \"Object '\" + path + \"' does not exist.\");\n}\n\nfunction quotaExceeded(bucket) {\n  return new StorageError(\"quota-exceeded\"\n  /* QUOTA_EXCEEDED */\n  , \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\n\nfunction unauthenticated() {\n  const message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new StorageError(\"unauthenticated\"\n  /* UNAUTHENTICATED */\n  , message);\n}\n\nfunction unauthorizedApp() {\n  return new StorageError(\"unauthorized-app\"\n  /* UNAUTHORIZED_APP */\n  , 'This app does not have permission to access Firebase Storage on this project.');\n}\n\nfunction unauthorized(path) {\n  return new StorageError(\"unauthorized\"\n  /* UNAUTHORIZED */\n  , \"User does not have permission to access '\" + path + \"'.\");\n}\n\nfunction retryLimitExceeded() {\n  return new StorageError(\"retry-limit-exceeded\"\n  /* RETRY_LIMIT_EXCEEDED */\n  , 'Max retry time for operation exceeded, please try again.');\n}\n\nfunction canceled() {\n  return new StorageError(\"canceled\"\n  /* CANCELED */\n  , 'User canceled the upload/download.');\n}\n\nfunction invalidUrl(url) {\n  return new StorageError(\"invalid-url\"\n  /* INVALID_URL */\n  , \"Invalid URL '\" + url + \"'.\");\n}\n\nfunction invalidDefaultBucket(bucket) {\n  return new StorageError(\"invalid-default-bucket\"\n  /* INVALID_DEFAULT_BUCKET */\n  , \"Invalid default bucket '\" + bucket + \"'.\");\n}\n\nfunction noDefaultBucket() {\n  return new StorageError(\"no-default-bucket\"\n  /* NO_DEFAULT_BUCKET */\n  , 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\n\nfunction cannotSliceBlob() {\n  return new StorageError(\"cannot-slice-blob\"\n  /* CANNOT_SLICE_BLOB */\n  , 'Cannot slice blob for upload. Please retry the upload.');\n}\n\nfunction serverFileWrongSize() {\n  return new StorageError(\"server-file-wrong-size\"\n  /* SERVER_FILE_WRONG_SIZE */\n  , 'Server recorded incorrect upload file size, please retry the upload.');\n}\n\nfunction noDownloadURL() {\n  return new StorageError(\"no-download-url\"\n  /* NO_DOWNLOAD_URL */\n  , 'The given file does not have any download URLs.');\n}\n/**\r\n * @internal\r\n */\n\n\nfunction invalidArgument(message) {\n  return new StorageError(\"invalid-argument\"\n  /* INVALID_ARGUMENT */\n  , message);\n}\n\nfunction appDeleted() {\n  return new StorageError(\"app-deleted\"\n  /* APP_DELETED */\n  , 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\n\n\nfunction invalidRootOperation(name) {\n  return new StorageError(\"invalid-root-operation\"\n  /* INVALID_ROOT_OPERATION */\n  , \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\n\n\nfunction invalidFormat(format, message) {\n  return new StorageError(\"invalid-format\"\n  /* INVALID_FORMAT */\n  , \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\n\n\nfunction internalError(message) {\n  throw new StorageError(\"internal-error\"\n  /* INTERNAL_ERROR */\n  , 'Internal error: ' + message);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\n\n\nclass XhrConnection {\n  constructor() {\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n  /**\r\n   * @override\r\n   */\n\n\n  send(url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n\n    return this.sendPromise_;\n  }\n  /**\r\n   * @override\r\n   */\n\n\n  getErrorCode() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n\n    return this.errorCode_;\n  }\n  /**\r\n   * @override\r\n   */\n\n\n  getStatus() {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n  /**\r\n   * @override\r\n   */\n\n\n  getResponseText() {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n\n    return this.xhr_.responseText;\n  }\n  /**\r\n   * Aborts the request.\r\n   * @override\r\n   */\n\n\n  abort() {\n    this.xhr_.abort();\n  }\n  /**\r\n   * @override\r\n   */\n\n\n  getResponseHeader(header) {\n    return this.xhr_.getResponseHeader(header);\n  }\n  /**\r\n   * @override\r\n   */\n\n\n  addUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n  /**\r\n   * @override\r\n   */\n\n\n  removeUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n\n}\n\nfunction newConnection() {\n  return new XhrConnection();\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Factory-like class for creating XhrIo instances.\r\n */\n\n\nclass ConnectionPool {\n  createConnection() {\n    return newConnection();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\n\n\nclass Location {\n  constructor(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n\n  get path() {\n    return this.path_;\n  }\n\n  get isRoot() {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString, host) {\n    let bucketLocation;\n\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url, host) {\n    let location = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\n    const firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    const cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\n    const cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    const groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n\n        if (!pathValue) {\n          pathValue = '';\n        }\n\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n\n    return location;\n  }\n\n}\n/**\r\n * A request whose promise always fails.\r\n */\n\n\nclass FailRequest {\n  constructor(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n\n\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n\n\n  cancel(_appDelete = false) {}\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\n\n\nfunction start(f, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1; // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  let timeoutId = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled() {\n    return cancelState === 2;\n  }\n\n  let triggeredCallback = false;\n\n  function triggerCallback(...args) {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis) {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success, ...args) {\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n\n    const mustStop = canceled() || hitTimeout;\n\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n\n    let waitMillis;\n\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n\n    callWithDelay(waitMillis);\n  }\n\n  let stopped = false;\n\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n\n    stopped = true;\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\n\n\nfunction stop(id) {\n  id(false);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isJustDef(p) {\n  return p !== void 0;\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\n\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\n\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\n\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\n  }\n\n  if (value > maxValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction makeUrl(urlPart, host, protocol) {\n  let origin = host;\n\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nfunction makeQueryString(params) {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  } // Chop off the extra '&' or '?' on the end\n\n\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass NetworkRequest {\n  constructor(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n\n\n  start_() {\n    const self = this;\n\n    function doTheRequest(backoffCallback, canceled) {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n\n      const connection = self.pool_.createConnection();\n      self.pendingConnection_ = connection;\n\n      function progressListener(progressEvent) {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n\n      if (self.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      } // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n      connection.send(self.url_, self.method_, self.body_, self.headers_).then(() => {\n        if (self.progressCallback_ !== null) {\n          connection.removeUploadProgressListener(progressListener);\n        }\n\n        self.pendingConnection_ = null;\n        const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n        const status = connection.getStatus();\n\n        if (!hitServer || self.isRetryStatusCode_(status)) {\n          const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n\n        const successCode = self.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, connection));\n      });\n    }\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n\n\n    function backoffDone(requestWentThrough, status) {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const connection = status.connection;\n\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(connection, connection.getResponseText());\n\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getResponseText();\n\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n  /** @inheritDoc */\n\n\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n\n\n  cancel(appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  isRetryStatusCode_(status) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.\n    408, // Too Many Requests: you're getting rate-limited, basically.\n    429];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n\n}\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\n\n\nclass RequestEndStatus {\n  constructor(wasSuccessCode, connection, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.connection = connection;\n    this.canceled = !!canceled;\n  }\n\n}\n\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\n\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, pool, firebaseVersion) {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\n\n\nfunction getBlob(...args) {\n  const BlobBuilder = getBlobBuilder();\n\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\"unsupported-environment\"\n      /* UNSUPPORTED_ENVIRONMENT */\n      , \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\n\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Converts a Base64 encoded string to a binary string. */\n\n\nfunction decodeBase64(encoded) {\n  return atob(encoded);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\n\n\nconst StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\n\nclass StringData {\n  constructor(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n\n}\n/**\r\n * @internal\r\n */\n\n\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  } // assert(false);\n\n\n  throw unknown();\n}\n\nfunction utf8Bytes_(value) {\n  const b = [];\n\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n\n  return new Uint8Array(b);\n}\n\nfunction percentEncodedBytes_(value) {\n  let decoded;\n\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n\n  return utf8Bytes_(decoded);\n}\n\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        const hasMinus = value.indexOf('-') !== -1;\n        const hasUnder = value.indexOf('_') !== -1;\n\n        if (hasMinus || hasUnder) {\n          const invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n\n        break;\n      }\n\n    case StringFormat.BASE64URL:\n      {\n        const hasPlus = value.indexOf('+') !== -1;\n        const hasSlash = value.indexOf('/') !== -1;\n\n        if (hasPlus || hasSlash) {\n          const invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  let bytes;\n\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n\n  const array = new Uint8Array(bytes.length);\n\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n\n  return array;\n}\n\nclass DataURLParts {\n  constructor(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n\n    const middle = matches[1] || null;\n\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n\n}\n\nfunction dataURLBytes_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nfunction dataURLContentType_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s, end) {\n  const longEnough = s.length >= end.length;\n\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\n\n\nclass FbsBlob {\n  constructor(data, elideCopy) {\n    let size = 0;\n    let blobType = '';\n\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n\n      size = data.length;\n    }\n\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size() {\n    return this.size_;\n  }\n\n  type() {\n    return this.type_;\n  }\n\n  slice(startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n\n      if (sliced === null) {\n        return null;\n      }\n\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args) {\n    if (isNativeBlobDefined()) {\n      const blobby = args.map(val => {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays = args.map(val => {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      let finalLength = 0;\n      uint8Arrays.forEach(array => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach(array => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData() {\n    return this.data_;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\n\n\nfunction jsonObjectOrNull(s) {\n  let obj;\n\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n\n/**\r\n * @return Null if the path is already at the root.\r\n */\n\n\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  const index = path.lastIndexOf('/');\n\n  if (index === -1) {\n    return '';\n  }\n\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nfunction child(path, childPath) {\n  const canonicalChildPath = childPath.split('/').filter(component => component.length > 0).join('/');\n\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\n\n\nfunction lastComponent(path) {\n  const index = path.lastIndexOf('/', path.length - 2);\n\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction noXform_(metadata, value) {\n  return value;\n}\n\nclass Mapping {\n  constructor(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n\n}\n\nlet mappings_ = null;\n\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n\n  const mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n\n  const nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n\n  const sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nfunction addRef(metadata, service) {\n  function generateRef() {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\n\nfunction fromResource(service, resource, mappings) {\n  const metadata = {};\n  metadata['type'] = 'file';\n  const len = mappings.length;\n\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n\n  addRef(metadata, service);\n  return metadata;\n}\n\nfunction fromResourceString(service, resourceString, mappings) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  const resource = obj;\n  return fromResource(service, resource, mappings);\n}\n\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n\n  const tokens = obj['downloadTokens'];\n\n  if (tokens.length === 0) {\n    return null;\n  }\n\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map(token => {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nfunction toResourceString(metadata, mappings) {\n  const resource = {};\n  const len = mappings.length;\n\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n\n  return JSON.stringify(resource);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(service, bucket, resource) {\n  const listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n\n      const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(new Location(bucket, item['name']));\n\n      listResult.items.push(reference);\n    }\n  }\n\n  return listResult;\n}\n\nfunction fromResponseString(service, bucket, resourceString) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  const resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n\nclass RequestInfo {\n  constructor(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\n\n\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n\n  return handler;\n}\n\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n\n  return handler;\n}\n\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n  }\n\n  return handler;\n}\n\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    let newErr;\n\n    if (xhr.getStatus() === 401) {\n      if ( // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getResponseText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction objectErrorHandler(location) {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(xhr, err) {\n    let newErr = shared(xhr, err);\n\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction getMetadata$2(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  const urlParams = {};\n\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nfunction getDownloadUrl(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction deleteObject$2(service, location) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr, _text) {}\n\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\n\nfunction metadataForUpload_(location, blob, metadata) {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\n\n\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary() {\n    let str = '';\n\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n\n    return str;\n  }\n\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  const urlParams = {\n    name: metadata_['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\n\n\nclass ResumableUploadStatus {\n  constructor(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n\n}\n\nfunction checkResumeHeader_(xhr, allowed) {\n  let status = null;\n\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\n\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    let url;\n\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    handlerCheck(isString(url));\n    return url;\n  }\n\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\n\n\nfunction getResumableUploadStatus(service, location, url, blob) {\n  const headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n\n  function handler(xhr) {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString = null;\n\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\n\n\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\n\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\n\n\nconst TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n}; // type keys = keyof TaskState\n\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\n\nconst TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\"\n    /* RUNNING */\n    :\n    case \"pausing\"\n    /* PAUSING */\n    :\n    case \"canceling\"\n    /* CANCELING */\n    :\n      return TaskState.RUNNING;\n\n    case \"paused\"\n    /* PAUSED */\n    :\n      return TaskState.PAUSED;\n\n    case \"success\"\n    /* SUCCESS */\n    :\n      return TaskState.SUCCESS;\n\n    case \"canceled\"\n    /* CANCELED */\n    :\n      return TaskState.CANCELED;\n\n    case \"error\"\n    /* ERROR */\n    :\n      return TaskState.ERROR;\n\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass Observer {\n  constructor(nextOrObserver, error, complete) {\n    const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error !== null && error !== void 0 ? error : undefined;\n      this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n    } else {\n      const observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction async(f) {\n  return (...argsToForward) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\n\n\nclass UploadTask {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  constructor(ref, blob, metadata = null) {\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\"\n    /* RUNNING */\n    ;\n\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n\n      if (error._codeEquals(\"canceled\"\n      /* CANCELED */\n      )) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n\n        this._transition(\"error\"\n        /* ERROR */\n        );\n      }\n    };\n\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n\n      if (error._codeEquals(\"canceled\"\n      /* CANCELED */\n      )) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n\n        this._transition(\"error\"\n        /* ERROR */\n        );\n      }\n    };\n\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n\n      this._start();\n    }); // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n\n    this._promise.then(null, () => {});\n  }\n\n  _makeProgressCallback() {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  _shouldDoResumable(blob) {\n    return blob.size() > 256 * 1024;\n  }\n\n  _start() {\n    if (this._state !== \"running\"\n    /* RUNNING */\n    ) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n\n    if (this._request !== undefined) {\n      return;\n    }\n\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  _resolveToken(callback) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case \"running\"\n        /* RUNNING */\n        :\n          callback(authToken, appCheckToken);\n          break;\n\n        case \"canceling\"\n        /* CANCELING */\n        :\n          this._transition(\"canceled\"\n          /* CANCELED */\n          );\n\n          break;\n\n        case \"pausing\"\n        /* PAUSING */\n        :\n          this._transition(\"paused\"\n          /* PAUSED */\n          );\n\n          break;\n      }\n    });\n  } // TODO(andysoto): assert false\n\n\n  _createResumable() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n\n      const createRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n\n      this._request = createRequest;\n      createRequest.getPromise().then(url => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  _fetchStatus() {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\n\n      const statusRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status;\n        this._request = undefined;\n\n        this._updateProgress(status.current);\n\n        this._needToFetchStatus = false;\n\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  _continueUpload() {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(this._transferred, this._blob.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n    const url = this._uploadUrl;\n\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n\n      try {\n        requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\n      } catch (e) {\n        this._error = e;\n\n        this._transition(\"error\"\n        /* ERROR */\n        );\n\n        return;\n      }\n\n      const uploadRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then(newStatus => {\n        this._increaseMultiplier();\n\n        this._request = undefined;\n\n        this._updateProgress(newStatus.current);\n\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n\n          this._transition(\"success\"\n          /* SUCCESS */\n          );\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  _increaseMultiplier() {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier; // Max chunk size is 32M.\n\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  _fetchMetadata() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\n\n      const metadataRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n\n        this._transition(\"success\"\n        /* SUCCESS */\n        );\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  _oneShotUpload() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n\n      const multipartRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n\n        this._updateProgress(this._blob.size());\n\n        this._transition(\"success\"\n        /* SUCCESS */\n        );\n      }, this._errorHandler);\n    });\n  }\n\n  _updateProgress(transferred) {\n    const old = this._transferred;\n    this._transferred = transferred; // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  _transition(state) {\n    if (this._state === state) {\n      return;\n    }\n\n    switch (state) {\n      case \"canceling\"\n      /* CANCELING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n\n        break;\n\n      case \"pausing\"\n      /* PAUSING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n\n        break;\n\n      case \"running\"\n      /* RUNNING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === \"paused\"\n        /* PAUSED */\n        ;\n        this._state = state;\n\n        if (wasPaused) {\n          this._notifyObservers();\n\n          this._start();\n        }\n\n        break;\n\n      case \"paused\"\n      /* PAUSED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"canceled\"\n      /* CANCELED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"error\"\n      /* ERROR */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"success\"\n      /* SUCCESS */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n    }\n  }\n\n  completeTransitions_() {\n    switch (this._state) {\n      case \"pausing\"\n      /* PAUSING */\n      :\n        this._transition(\"paused\"\n        /* PAUSED */\n        );\n\n        break;\n\n      case \"canceling\"\n      /* CANCELING */\n      :\n        this._transition(\"canceled\"\n        /* CANCELED */\n        );\n\n        break;\n\n      case \"running\"\n      /* RUNNING */\n      :\n        this._start();\n\n        break;\n    }\n  }\n  /**\r\n   * A snapshot of the current task state.\r\n   */\n\n\n  get snapshot() {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata,\n      task: this,\n      ref: this._ref\n    };\n  }\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   * @param nextOrObserver -\r\n   *     The `next` function, which gets called for each item in\r\n   *     the event stream, or an observer object with some or all of these three\r\n   *     properties (`next`, `error`, `complete`).\r\n   * @param error - A function that gets called with a `StorageError`\r\n   *     if the event stream ends due to an error.\r\n   * @param completed - A function that gets called if the\r\n   *     event stream ends normally.\r\n   * @returns\r\n   *     If only the event argument is passed, returns a function you can use to\r\n   *     add callbacks (see the examples above). If more than just the event\r\n   *     argument is passed, returns a function you can call to unregister the\r\n   *     callbacks.\r\n   */\n\n\n  on(type, nextOrObserver, error, completed) {\n    const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n\n    this._addObserver(observer);\n\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n\n\n  then(onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  }\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n\n\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  /**\r\n   * Adds the given observer.\r\n   */\n\n\n  _addObserver(observer) {\n    this._observers.push(observer);\n\n    this._notifyObserver(observer);\n  }\n  /**\r\n   * Removes the given observer.\r\n   */\n\n\n  _removeObserver(observer) {\n    const i = this._observers.indexOf(observer);\n\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  _notifyObservers() {\n    this._finishPromise();\n\n    const observers = this._observers.slice();\n\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  _finishPromise() {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n\n        default:\n          triggered = false;\n          break;\n      }\n\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  _notifyObserver(observer) {\n    const externalState = taskStateFromInternalTaskState(this._state);\n\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n\n        break;\n\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n\n        break;\n\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n        break;\n\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n    }\n  }\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  resume() {\n    const valid = this._state === \"paused\"\n    /* PAUSED */\n    || this._state === \"pausing\"\n    /* PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"running\"\n      /* RUNNING */\n      );\n    }\n\n    return valid;\n  }\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  pause() {\n    const valid = this._state === \"running\"\n    /* RUNNING */\n    ;\n\n    if (valid) {\n      this._transition(\"pausing\"\n      /* PAUSING */\n      );\n    }\n\n    return valid;\n  }\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  cancel() {\n    const valid = this._state === \"running\"\n    /* RUNNING */\n    || this._state === \"pausing\"\n    /* PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"canceling\"\n      /* CANCELING */\n      );\n    }\n\n    return valid;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\n\n\nclass Reference {\n  constructor(_service, location) {\n    this._service = _service;\n\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n\n\n  toString() {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  _newRef(service, location) {\n    return new Reference(service, location);\n  }\n  /**\r\n   * A reference to the root of this object's bucket.\r\n   */\n\n\n  get root() {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n  /**\r\n   * The name of the bucket containing this reference's object.\r\n   */\n\n\n  get bucket() {\n    return this._location.bucket;\n  }\n  /**\r\n   * The full path of this object.\r\n   */\n\n\n  get fullPath() {\n    return this._location.path;\n  }\n  /**\r\n   * The short name of this object, which is the last component of the full path.\r\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n   */\n\n\n  get name() {\n    return lastComponent(this._location.path);\n  }\n  /**\r\n   * The `StorageService` instance this `StorageReference` is associated with.\r\n   */\n\n\n  get storage() {\n    return this._service;\n  }\n  /**\r\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n   * this reference is the root.\r\n   */\n\n\n  get parent() {\n    const newPath = parent(this._location.path);\n\n    if (newPath === null) {\n      return null;\n    }\n\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n  /**\r\n   * Utility function to throw an error in methods that do not accept a root reference.\r\n   */\n\n\n  _throwIfRoot(name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadBytes$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytes');\n\n  const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n  return ref.storage.makeRequestWithTokens(requestInfo).then(request => request.getPromise()).then(finalMetadata => {\n    return {\n      metadata: finalMetadata,\n      ref\n    };\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\n  ref._throwIfRoot('uploadString');\n\n  const data = dataFromString(format, value);\n  const metadataClone = Object.assign({}, metadata);\n\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n\n  return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll$1(ref) {\n  const accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\n\n\nfunction listAllHelper(_x, _x2, _x3) {\n  return _listAllHelper.apply(this, arguments);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction _listAllHelper() {\n  _listAllHelper = _asyncToGenerator(function* (ref, accumulator, pageToken) {\n    const opt = {\n      // maxResults is 1000 by default.\n      pageToken\n    };\n    const nextPage = yield list$1(ref, opt);\n    accumulator.prefixes.push(...nextPage.prefixes);\n    accumulator.items.push(...nextPage.items);\n\n    if (nextPage.nextPageToken != null) {\n      yield listAllHelper(ref, accumulator, nextPage.nextPageToken);\n    }\n  });\n  return _listAllHelper.apply(this, arguments);\n}\n\nfunction list$1(_x4, _x5) {\n  return _list$.apply(this, arguments);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\n\n\nfunction _list$() {\n  _list$ = _asyncToGenerator(function* (ref, options) {\n    if (options != null) {\n      if (typeof options.maxResults === 'number') {\n        validateNumber('options.maxResults',\n        /* minValue= */\n        1,\n        /* maxValue= */\n        1000, options.maxResults);\n      }\n    }\n\n    const op = options || {};\n    const requestInfo = list$2(ref.storage, ref._location,\n    /*delimiter= */\n    '/', op.pageToken, op.maxResults);\n    return (yield ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n  });\n  return _list$.apply(this, arguments);\n}\n\nfunction getMetadata$1(_x6) {\n  return _getMetadata$.apply(this, arguments);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\n\n\nfunction _getMetadata$() {\n  _getMetadata$ = _asyncToGenerator(function* (ref) {\n    ref._throwIfRoot('getMetadata');\n\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n    return (yield ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n  });\n  return _getMetadata$.apply(this, arguments);\n}\n\nfunction updateMetadata$1(_x7, _x8) {\n  return _updateMetadata$.apply(this, arguments);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction _updateMetadata$() {\n  _updateMetadata$ = _asyncToGenerator(function* (ref, metadata) {\n    ref._throwIfRoot('updateMetadata');\n\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n    return (yield ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n  });\n  return _updateMetadata$.apply(this, arguments);\n}\n\nfunction getDownloadURL$1(_x9) {\n  return _getDownloadURL$.apply(this, arguments);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction _getDownloadURL$() {\n  _getDownloadURL$ = _asyncToGenerator(function* (ref) {\n    ref._throwIfRoot('getDownloadURL');\n\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n    return (yield ref.storage.makeRequestWithTokens(requestInfo)).getPromise().then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n\n      return url;\n    });\n  });\n  return _getDownloadURL$.apply(this, arguments);\n}\n\nfunction deleteObject$1(_x10) {\n  return _deleteObject$.apply(this, arguments);\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\n\n\nfunction _deleteObject$() {\n  _deleteObject$ = _asyncToGenerator(function* (ref) {\n    ref._throwIfRoot('deleteObject');\n\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\n    return (yield ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n  });\n  return _deleteObject$.apply(this, arguments);\n}\n\nfunction _getChild$1(ref, childPath) {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\n\n\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\n\n\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n\n    const reference = new Reference(service, service._bucket);\n\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(host, config) {\n  const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n\n  if (bucketString == null) {\n    return null;\n  }\n\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const {\n    mockUserToken\n  } = options;\n\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\n\n\nclass FirebaseStorageImpl {\n  constructor(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _appCheckProvider,\n  /**\r\n   * @internal\r\n   */\n  _pool, _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._pool = _pool;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     */\n\n    this._host = DEFAULT_HOST;\n    this._protocol = 'https';\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  /**\r\n   * The host string for this service, in the form of `host` or\r\n   * `host:port`.\r\n   */\n\n\n  get host() {\n    return this._host;\n  }\n\n  set host(host) {\n    this._host = host;\n\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n  /**\r\n   * The maximum time to retry uploads in milliseconds.\r\n   */\n\n\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time) {\n    validateNumber('time',\n    /* minValue=*/\n    0,\n    /* maxValue= */\n    Number.POSITIVE_INFINITY, time);\n    this._maxUploadRetryTime = time;\n  }\n  /**\r\n   * The maximum time to retry operations other than uploads or downloads in\r\n   * milliseconds.\r\n   */\n\n\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time) {\n    validateNumber('time',\n    /* minValue=*/\n    0,\n    /* maxValue= */\n    Number.POSITIVE_INFINITY, time);\n    this._maxOperationRetryTime = time;\n  }\n\n  _getAuthToken() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this._overrideAuthToken) {\n        return _this._overrideAuthToken;\n      }\n\n      const auth = _this._authProvider.getImmediate({\n        optional: true\n      });\n\n      if (auth) {\n        const tokenData = yield auth.getToken();\n\n        if (tokenData !== null) {\n          return tokenData.accessToken;\n        }\n      }\n\n      return null;\n    })();\n  }\n\n  _getAppCheckToken() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const appCheck = _this2._appCheckProvider.getImmediate({\n        optional: true\n      });\n\n      if (appCheck) {\n        const result = yield appCheck.getToken(); // TODO: What do we want to do if there is an error getting the token?\n        // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n        // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n        // the token (actual or dummy) to send requests.\n\n        return result.token;\n      }\n\n      return null;\n    })();\n  }\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   */\n\n\n  _delete() {\n    if (!this._deleted) {\n      this._deleted = true;\n\n      this._requests.forEach(request => request.cancel());\n\n      this._requests.clear();\n    }\n\n    return Promise.resolve();\n  }\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n\n\n  _makeStorageReference(loc) {\n    return new Reference(this, loc);\n  }\n  /**\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n\n\n  _makeRequest(requestInfo, authToken, appCheckToken) {\n    if (!this._deleted) {\n      const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, this._pool, this._firebaseVersion);\n\n      this._requests.add(request); // Request removes itself from set when complete.\n\n\n      request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  makeRequestWithTokens(requestInfo) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const [authToken, appCheckToken] = yield Promise.all([_this3._getAuthToken(), _this3._getAppCheckToken()]);\n      return _this3._makeRequest(requestInfo, authToken, appCheckToken);\n    })();\n  }\n\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.8.3\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nconst STORAGE_TYPE = 'storage';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\nfunction uploadBytes(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytes$1(ref, data, metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString(ref, value, format, metadata) {\n  ref = getModularInstance(ref);\n  return uploadString$1(ref, value, format, metadata);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\n\n\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\n\n\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\n\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\n\n\nfunction getStorage(app = getApp(), bucketUrl) {\n  app = getModularInstance(app);\n\n  const storageProvider = _getProvider(app, STORAGE_TYPE);\n\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\n\n\nfunction connectStorageEmulator(storage, host, port, options = {}) {\n  connectStorageEmulator$1(storage, host, port, options);\n}\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\n\n\nfunction factory(container, {\n  instanceIdentifier: url\n}) {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, new ConnectionPool(), url, SDK_VERSION);\n}\n\nfunction registerStorage() {\n  _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true));\n\n  registerVersion(name, version);\n}\n\nregisterStorage();\nexport { StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getDownloadURL, getMetadata, getStorage, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"sources":["C:/Dev/Angular/square/node_modules/@firebase/storage/dist/index.esm2017.js"],"names":["getApp","_getProvider","_registerComponent","registerVersion","SDK_VERSION","FirebaseError","createMockUserToken","getModularInstance","Component","ErrorCode","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","StorageError","constructor","code","message","prependCode","customData","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","_codeEquals","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorizedApp","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","XhrConnection","sent_","xhr_","XMLHttpRequest","errorCode_","NO_ERROR","sendPromise_","Promise","resolve","addEventListener","ABORT","NETWORK_ERROR","send","method","body","headers","open","undefined","key","hasOwnProperty","setRequestHeader","toString","getErrorCode","getStatus","status","e","getResponseText","responseText","abort","getResponseHeader","header","addUploadProgressListener","listener","upload","removeUploadProgressListener","removeEventListener","newConnection","ConnectionPool","createConnection","Location","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","host","bucketLocation","makeFromUrl","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","reject","getPromise","cancel","_appDelete","start","f","callback","timeout","waitSeconds","timeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","handler","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","clearTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","nextPart","NetworkRequest","successCodes","additionalRetryCodes","errorCallback","progressCallback","pool","pendingConnection_","backoffId_","canceled_","appDelete_","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","progressCallback_","timeout_","pool_","resolve_","reject_","start_","self","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","then","hitServer","isRetryStatusCode_","wasCanceled","successCode","indexOf","backoffDone","requestWentThrough","wasSuccessCode","result","err","appDelete","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","addAuthHeader_","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","urlParams","assign","errorHandler","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","bb","append","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","uploadData","jsonObjectOrNull","obj","JSON","parse","parent","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromResponseString","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","listHandler","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","includes","objectErrorHandler","shared","getMetadata$2","maxOperationRetryTime","list$2","delimiter","pageToken","maxResults","getDownloadUrl","updateMetadata$2","deleteObject$2","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","asFunctions","next","observer","async","argsToForward","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","_transition","_metadataErrorHandler","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","_continueUpload","_oneShotUpload","_resolveToken","all","storage","_getAuthToken","_getAppCheckToken","_location","createRequest","_makeRequest","statusRequest","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","snapshot","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_notifyObserver","splice","_finishPromise","observers","triggered","bind","toCall","resume","pause","Reference","_service","_newRef","root","_throwIfRoot","uploadBytes$1","makeRequestWithTokens","request","finalMetadata","uploadBytesResumable$1","uploadString$1","listAll$1","accumulator","listAllHelper","opt","nextPage","list$1","options","op","getMetadata$1","updateMetadata$1","getDownloadURL$1","deleteObject$1","_getChild$1","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","ref$1","serviceOrRef","pathOrUrl","extractBucket","config","connectStorageEmulator$1","port","mockUserToken","_overrideAuthToken","app","projectId","_authProvider","_appCheckProvider","_pool","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","_delete","clear","add","delete","STORAGE_TYPE","uploadBytes","uploadString","uploadBytesResumable","getMetadata","updateMetadata","list","listAll","getDownloadURL","deleteObject","_getChild","getStorage","bucketUrl","storageProvider","storageInstance","identifier","connectStorageEmulator","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","registerStorage","setMultipleInstances","_FbsBlob","_Location","_TaskEvent","_TaskState","_UploadTask","_dataFromString","_invalidArgument","_invalidRootOperation"],"mappings":"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","sourcesContent":["import { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain name for firebase storage.\r\n */\r\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\r\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\r\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\r\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\r\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\r\nclass StorageError extends FirebaseError {\r\n    /**\r\n     * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     */\r\n    constructor(code, message) {\r\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\r\n        /**\r\n         * Stores custom error data unque to StorageError.\r\n         */\r\n        this.customData = { serverResponse: null };\r\n        this._baseMessage = this.message;\r\n        // Without this, `instanceof StorageError`, in tests for example,\r\n        // returns false.\r\n        Object.setPrototypeOf(this, StorageError.prototype);\r\n    }\r\n    /**\r\n     * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n     */\r\n    _codeEquals(code) {\r\n        return prependCode(code) === this.code;\r\n    }\r\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\r\n    get serverResponse() {\r\n        return this.customData.serverResponse;\r\n    }\r\n    set serverResponse(serverResponse) {\r\n        this.customData.serverResponse = serverResponse;\r\n        if (this.customData.serverResponse) {\r\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\r\n        }\r\n        else {\r\n            this.message = this._baseMessage;\r\n        }\r\n    }\r\n}\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    const message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new StorageError(\"unknown\" /* UNKNOWN */, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new StorageError(\"object-not-found\" /* OBJECT_NOT_FOUND */, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new StorageError(\"quota-exceeded\" /* QUOTA_EXCEEDED */, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new StorageError(\"unauthenticated\" /* UNAUTHENTICATED */, message);\r\n}\r\nfunction unauthorizedApp() {\r\n    return new StorageError(\"unauthorized-app\" /* UNAUTHORIZED_APP */, 'This app does not have permission to access Firebase Storage on this project.');\r\n}\r\nfunction unauthorized(path) {\r\n    return new StorageError(\"unauthorized\" /* UNAUTHORIZED */, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new StorageError(\"retry-limit-exceeded\" /* RETRY_LIMIT_EXCEEDED */, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new StorageError(\"canceled\" /* CANCELED */, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new StorageError(\"invalid-url\" /* INVALID_URL */, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new StorageError(\"invalid-default-bucket\" /* INVALID_DEFAULT_BUCKET */, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction noDefaultBucket() {\r\n    return new StorageError(\"no-default-bucket\" /* NO_DEFAULT_BUCKET */, 'No default bucket ' +\r\n        \"found. Did you set the '\" +\r\n        CONFIG_STORAGE_BUCKET_KEY +\r\n        \"' property when initializing the app?\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new StorageError(\"cannot-slice-blob\" /* CANNOT_SLICE_BLOB */, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new StorageError(\"server-file-wrong-size\" /* SERVER_FILE_WRONG_SIZE */, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new StorageError(\"no-download-url\" /* NO_DOWNLOAD_URL */, 'The given file does not have any download URLs.');\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction invalidArgument(message) {\r\n    return new StorageError(\"invalid-argument\" /* INVALID_ARGUMENT */, message);\r\n}\r\nfunction appDeleted() {\r\n    return new StorageError(\"app-deleted\" /* APP_DELETED */, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new StorageError(\"invalid-root-operation\" /* INVALID_ROOT_OPERATION */, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new StorageError(\"invalid-format\" /* INVALID_FORMAT */, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message - A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new StorageError(\"internal-error\" /* INTERNAL_ERROR */, 'Internal error: ' + message);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\r\nclass XhrConnection {\r\n    constructor() {\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = new Promise(resolve => {\r\n            this.xhr_.addEventListener('abort', () => {\r\n                this.errorCode_ = ErrorCode.ABORT;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('error', () => {\r\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('load', () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    send(url, method, body, headers) {\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (headers !== undefined) {\r\n            for (const key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\r\n                }\r\n            }\r\n        }\r\n        if (body !== undefined) {\r\n            this.xhr_.send(body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    getErrorCode() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    getStatus() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    getResponseText() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponseText() before sending');\r\n        }\r\n        return this.xhr_.responseText;\r\n    }\r\n    /**\r\n     * Aborts the request.\r\n     * @override\r\n     */\r\n    abort() {\r\n        this.xhr_.abort();\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    getResponseHeader(header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    addUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    removeUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    }\r\n}\r\nfunction newConnection() {\r\n    return new XhrConnection();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Factory-like class for creating XhrIo instances.\r\n */\r\nclass ConnectionPool {\r\n    createConnection() {\r\n        return newConnection();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\r\nclass Location {\r\n    constructor(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    get path() {\r\n        return this.path_;\r\n    }\r\n    get isRoot() {\r\n        return this.path.length === 0;\r\n    }\r\n    fullServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    }\r\n    bucketOnlyServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    }\r\n    static makeFromBucketSpec(bucketString, host) {\r\n        let bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString, host);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    }\r\n    static makeFromUrl(url, host) {\r\n        let location = null;\r\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        const gsPath = '(/(.*))?$';\r\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        const gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        const version = 'v[A-Za-z0-9_]+';\r\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\r\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\r\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\r\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\r\n        const cloudStorageHost = host === DEFAULT_HOST\r\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\r\n            : host;\r\n        const cloudStoragePath = '([^?#]*)';\r\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\r\n        const cloudStorageIndices = { bucket: 1, path: 2 };\r\n        const groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            {\r\n                regex: firebaseStorageRegExp,\r\n                indices: firebaseStorageIndices,\r\n                postModify: httpModify\r\n            },\r\n            {\r\n                regex: cloudStorageRegExp,\r\n                indices: cloudStorageIndices,\r\n                postModify: httpModify\r\n            }\r\n        ];\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            const captures = group.regex.exec(url);\r\n            if (captures) {\r\n                const bucketValue = captures[group.indices.bucket];\r\n                let pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    }\r\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\r\nclass FailRequest {\r\n    constructor(error) {\r\n        this.promise_ = Promise.reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(_appDelete = false) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\r\nfunction start(f, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ncallback, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    let waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let timeoutId = null;\r\n    let hitTimeout = false;\r\n    let cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    let triggeredCallback = false;\r\n    function triggerCallback(...args) {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            callback.apply(null, args);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        timeoutId = setTimeout(() => {\r\n            timeoutId = null;\r\n            f(handler, canceled());\r\n        }, millis);\r\n    }\r\n    function handler(success, ...args) {\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (success) {\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        const mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        let waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    let stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (timeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(timeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    setTimeout(() => {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return typeof p === 'object' && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    return typeof Blob !== 'undefined';\r\n}\r\nfunction validateNumber(argument, minValue, maxValue, value) {\r\n    if (value < minValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\r\n    }\r\n    if (value > maxValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeUrl(urlPart, host, protocol) {\r\n    let origin = host;\r\n    if (protocol == null) {\r\n        origin = `https://${host}`;\r\n    }\r\n    return `${protocol}://${origin}/v0${urlPart}`;\r\n}\r\nfunction makeQueryString(params) {\r\n    const encode = encodeURIComponent;\r\n    let queryPart = '?';\r\n    for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n            const nextPart = encode(key) + '=' + encode(params[key]);\r\n            queryPart = queryPart + nextPart + '&';\r\n        }\r\n    }\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NetworkRequest {\r\n    constructor(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {\r\n        this.pendingConnection_ = null;\r\n        this.backoffId_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.url_ = url;\r\n        this.method_ = method;\r\n        this.headers_ = headers;\r\n        this.body_ = body;\r\n        this.successCodes_ = successCodes.slice();\r\n        this.additionalRetryCodes_ = additionalRetryCodes.slice();\r\n        this.callback_ = callback;\r\n        this.errorCallback_ = errorCallback;\r\n        this.progressCallback_ = progressCallback;\r\n        this.timeout_ = timeout;\r\n        this.pool_ = pool;\r\n        this.promise_ = new Promise((resolve, reject) => {\r\n            this.resolve_ = resolve;\r\n            this.reject_ = reject;\r\n            this.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    start_() {\r\n        const self = this;\r\n        function doTheRequest(backoffCallback, canceled) {\r\n            if (canceled) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            const connection = self.pool_.createConnection();\r\n            self.pendingConnection_ = connection;\r\n            function progressListener(progressEvent) {\r\n                const loaded = progressEvent.loaded;\r\n                const total = progressEvent.lengthComputable ? progressEvent.total : -1;\r\n                if (self.progressCallback_ !== null) {\r\n                    self.progressCallback_(loaded, total);\r\n                }\r\n            }\r\n            if (self.progressCallback_ !== null) {\r\n                connection.addUploadProgressListener(progressListener);\r\n            }\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            connection\r\n                .send(self.url_, self.method_, self.body_, self.headers_)\r\n                .then(() => {\r\n                if (self.progressCallback_ !== null) {\r\n                    connection.removeUploadProgressListener(progressListener);\r\n                }\r\n                self.pendingConnection_ = null;\r\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\r\n                const status = connection.getStatus();\r\n                if (!hitServer || self.isRetryStatusCode_(status)) {\r\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                const successCode = self.successCodes_.indexOf(status) !== -1;\r\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\r\n            });\r\n        }\r\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        function backoffDone(requestWentThrough, status) {\r\n            const resolve = self.resolve_;\r\n            const reject = self.reject_;\r\n            const connection = status.connection;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    const result = self.callback_(connection, connection.getResponseText());\r\n                    if (isJustDef(result)) {\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                if (connection !== null) {\r\n                    const err = unknown();\r\n                    err.serverResponse = connection.getResponseText();\r\n                    if (self.errorCallback_) {\r\n                        reject(self.errorCallback_(connection, err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        const err = self.appDelete_ ? appDeleted() : canceled();\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        const err = retryLimitExceeded();\r\n                        reject(err);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingConnection_ !== null) {\r\n            this.pendingConnection_.abort();\r\n        }\r\n    }\r\n    isRetryStatusCode_(status) {\r\n        // The codes for which to retry came from this page:\r\n        // https://cloud.google.com/storage/docs/exponential-backoff\r\n        const isFiveHundredCode = status >= 500 && status < 600;\r\n        const extraRetryCodes = [\r\n            // Request Timeout: web server didn't receive full request in time.\r\n            408,\r\n            // Too Many Requests: you're getting rate-limited, basically.\r\n            429\r\n        ];\r\n        const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\r\n        const isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\r\n        return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\r\n    }\r\n}\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\r\nclass RequestEndStatus {\r\n    constructor(wasSuccessCode, connection, canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.connection = connection;\r\n        this.canceled = !!canceled;\r\n    }\r\n}\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers, firebaseVersion) {\r\n    headers['X-Firebase-Storage-Version'] =\r\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\r\n}\r\nfunction addGmpidHeader_(headers, appId) {\r\n    if (appId) {\r\n        headers['X-Firebase-GMPID'] = appId;\r\n    }\r\n}\r\nfunction addAppCheckHeader_(headers, appCheckToken) {\r\n    if (appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = appCheckToken;\r\n    }\r\n}\r\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, pool, firebaseVersion) {\r\n    const queryPart = makeQueryString(requestInfo.urlParams);\r\n    const url = requestInfo.url + queryPart;\r\n    const headers = Object.assign({}, requestInfo.headers);\r\n    addGmpidHeader_(headers, appId);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers, firebaseVersion);\r\n    addAppCheckHeader_(headers, appCheckToken);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob(...args) {\r\n    const BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        const bb = new BlobBuilder();\r\n        for (let i = 0; i < args.length; i++) {\r\n            bb.append(args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(args);\r\n        }\r\n        else {\r\n            throw new StorageError(\"unsupported-environment\" /* UNSUPPORTED_ENVIRONMENT */, \"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    return atob(encoded);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\r\nconst StringFormat = {\r\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */\r\n    RAW: 'raw',\r\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64: 'base64',\r\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64URL: 'base64url',\r\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */\r\n    DATA_URL: 'data_url'\r\n};\r\nclass StringData {\r\n    constructor(data, contentType) {\r\n        this.data = data;\r\n        this.contentType = contentType || null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction dataFromString(format, stringData) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(stringData));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, stringData));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\r\n        // do nothing\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(value) {\r\n    const b = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n        let c = value.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) === 55296) {\r\n                    // The start of a surrogate pair.\r\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        const hi = c;\r\n                        const lo = value.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) === 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(value) {\r\n    let decoded;\r\n    try {\r\n        decoded = decodeURIComponent(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, value) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            const hasMinus = value.indexOf('-') !== -1;\r\n            const hasUnder = value.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                const invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            const hasPlus = value.indexOf('+') !== -1;\r\n            const hasSlash = value.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                const invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n        // do nothing\r\n    }\r\n    let bytes;\r\n    try {\r\n        bytes = decodeBase64(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    const array = new Uint8Array(bytes.length);\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\nclass DataURLParts {\r\n    constructor(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        const matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        const middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n}\r\nfunction dataURLBytes_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    const longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\r\nclass FbsBlob {\r\n    constructor(data, elideCopy) {\r\n        let size = 0;\r\n        let blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    size() {\r\n        return this.size_;\r\n    }\r\n    type() {\r\n        return this.type_;\r\n    }\r\n    slice(startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            const realBlob = this.data_;\r\n            const sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    }\r\n    static getBlob(...args) {\r\n        if (isNativeBlobDefined()) {\r\n            const blobby = args.map((val) => {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob.apply(null, blobby));\r\n        }\r\n        else {\r\n            const uint8Arrays = args.map((val) => {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            let finalLength = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                finalLength += array.byteLength;\r\n            });\r\n            const merged = new Uint8Array(finalLength);\r\n            let index = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                for (let i = 0; i < array.length; i++) {\r\n                    merged[index++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged, true);\r\n        }\r\n    }\r\n    uploadData() {\r\n        return this.data_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    let obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    const newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    const canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(component => component.length > 0)\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    const index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\nclass Mapping {\r\n    constructor(server, local, writable, xform) {\r\n        this.server = server;\r\n        this.local = local || server;\r\n        this.writable = !!writable;\r\n        this.xform = xform || noXform_;\r\n    }\r\n}\r\nlet mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    if (!isString(fullPath) || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    const mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(_metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    const nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(_metadata, size) {\r\n        if (size !== undefined) {\r\n            return Number(size);\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    const sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, service) {\r\n    function generateRef() {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const loc = new Location(bucket, path);\r\n        return service._makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(service, resource, mappings) {\r\n    const metadata = {};\r\n    metadata['type'] = 'file';\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, service);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(service, resourceString, mappings) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromResource(service, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    const tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    const encode = encodeURIComponent;\r\n    const tokensList = tokens.split(',');\r\n    const urls = tokensList.map((token) => {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        const base = makeUrl(urlPart, host, protocol);\r\n        const queryString = makeQueryString({\r\n            alt: 'media',\r\n            token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    const resource = {};\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PREFIXES_KEY = 'prefixes';\r\nconst ITEMS_KEY = 'items';\r\nfunction fromBackendResponse(service, bucket, resource) {\r\n    const listResult = {\r\n        prefixes: [],\r\n        items: [],\r\n        nextPageToken: resource['nextPageToken']\r\n    };\r\n    if (resource[PREFIXES_KEY]) {\r\n        for (const path of resource[PREFIXES_KEY]) {\r\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\r\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\r\n            listResult.prefixes.push(reference);\r\n        }\r\n    }\r\n    if (resource[ITEMS_KEY]) {\r\n        for (const item of resource[ITEMS_KEY]) {\r\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\r\n            listResult.items.push(reference);\r\n        }\r\n    }\r\n    return listResult;\r\n}\r\nfunction fromResponseString(service, bucket, resourceString) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromBackendResponse(service, bucket, resource);\r\n}\n\nclass RequestInfo {\r\n    constructor(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction listHandler(service, bucket) {\r\n    function handler(xhr, text) {\r\n        const listResult = fromResponseString(service, bucket, text);\r\n        handlerCheck(listResult !== null);\r\n        return listResult;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        let newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            if (\r\n            // This exact message string is the only consistent part of the\r\n            // server's error response that identifies it as an App Check error.\r\n            xhr.getResponseText().includes('Firebase App Check token is invalid')) {\r\n                newErr = unauthorizedApp();\r\n            }\r\n            else {\r\n                newErr = unauthenticated();\r\n            }\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    const shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        let newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata$2(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\r\n    const urlParams = {};\r\n    if (location.isRoot) {\r\n        urlParams['prefix'] = '';\r\n    }\r\n    else {\r\n        urlParams['prefix'] = location.path + '/';\r\n    }\r\n    if (delimiter && delimiter.length > 0) {\r\n        urlParams['delimiter'] = delimiter;\r\n    }\r\n    if (pageToken) {\r\n        urlParams['pageToken'] = pageToken;\r\n    }\r\n    if (maxResults) {\r\n        urlParams['maxResults'] = maxResults;\r\n    }\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata$2(service, location, metadata, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'PATCH';\r\n    const body = toResourceString(metadata, mappings);\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject$2(service, location) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'DELETE';\r\n    const timeout = service.maxOperationRetryTime;\r\n    function handler(_xhr, _text) { }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, metadata) {\r\n    const metadataClone = Object.assign({}, metadata);\r\n    metadataClone['fullPath'] = location.path;\r\n    metadataClone['size'] = blob.size();\r\n    if (!metadataClone['contentType']) {\r\n        metadataClone['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadataClone;\r\n}\r\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\r\nfunction multipartUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        let str = '';\r\n        for (let i = 0; i < 2; i++) {\r\n            str = str + Math.random().toString().slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    const boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    const metadata_ = metadataForUpload_(location, blob, metadata);\r\n    const metadataString = toResourceString(metadata_, mappings);\r\n    const preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata_['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    const postBlobPart = '\\r\\n--' + boundary + '--';\r\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    const urlParams = { name: metadata_['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\r\nclass ResumableUploadStatus {\r\n    constructor(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n}\r\nfunction checkResumeHeader_(xhr, allowed) {\r\n    let status = null;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    const allowedStatus = allowed || ['active'];\r\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\r\n    return status;\r\n}\r\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\r\n    const urlParams = { name: metadataForUpload['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\r\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    const body = toResourceString(metadataForUpload, mappings);\r\n    const timeout = service.maxUploadRetryTime;\r\n    function handler(xhr) {\r\n        checkResumeHeader_(xhr);\r\n        let url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(service, location, url, blob) {\r\n    const headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr) {\r\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        let sizeString = null;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        if (!sizeString) {\r\n            // null or empty string\r\n            handlerCheck(false);\r\n        }\r\n        const size = Number(sizeString);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    const status_ = new ResumableUploadStatus(0, 0);\r\n    if (status) {\r\n        status_.current = status.current;\r\n        status_.total = status.total;\r\n    }\r\n    else {\r\n        status_.current = 0;\r\n        status_.total = blob.size();\r\n    }\r\n    if (blob.size() !== status_.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    const bytesLeft = status_.total - status_.current;\r\n    let bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    const startByte = status_.current;\r\n    const endByte = startByte + bytesToUpload;\r\n    const uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\r\n    const headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': `${status_.current}`\r\n    };\r\n    const body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        const newCurrent = status_.current + bytesToUpload;\r\n        const size = blob.size();\r\n        let metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(service, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\r\nconst TaskEvent = {\r\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\n// type keys = keyof TaskState\r\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\r\nconst TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case \"running\" /* RUNNING */:\r\n        case \"pausing\" /* PAUSING */:\r\n        case \"canceling\" /* CANCELING */:\r\n            return TaskState.RUNNING;\r\n        case \"paused\" /* PAUSED */:\r\n            return TaskState.PAUSED;\r\n        case \"success\" /* SUCCESS */:\r\n            return TaskState.SUCCESS;\r\n        case \"canceled\" /* CANCELED */:\r\n            return TaskState.CANCELED;\r\n        case \"error\" /* ERROR */:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Observer {\r\n    constructor(nextOrObserver, error, complete) {\r\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = error !== null && error !== void 0 ? error : undefined;\r\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\r\n        }\r\n        else {\r\n            const observer = nextOrObserver;\r\n            this.next = observer.next;\r\n            this.error = observer.error;\r\n            this.complete = observer.complete;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(f) {\r\n    return (...argsToForward) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.resolve().then(() => f(...argsToForward));\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\r\nclass UploadTask {\r\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */\r\n    constructor(ref, blob, metadata = null) {\r\n        /**\r\n         * Number of bytes transferred so far.\r\n         */\r\n        this._transferred = 0;\r\n        this._needToFetchStatus = false;\r\n        this._needToFetchMetadata = false;\r\n        this._observers = [];\r\n        this._error = undefined;\r\n        this._uploadUrl = undefined;\r\n        this._request = undefined;\r\n        this._chunkMultiplier = 1;\r\n        this._resolve = undefined;\r\n        this._reject = undefined;\r\n        this._ref = ref;\r\n        this._blob = blob;\r\n        this._metadata = metadata;\r\n        this._mappings = getMappings();\r\n        this._resumable = this._shouldDoResumable(this._blob);\r\n        this._state = \"running\" /* RUNNING */;\r\n        this._errorHandler = error => {\r\n            this._request = undefined;\r\n            this._chunkMultiplier = 1;\r\n            if (error._codeEquals(\"canceled\" /* CANCELED */)) {\r\n                this._needToFetchStatus = true;\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* ERROR */);\r\n            }\r\n        };\r\n        this._metadataErrorHandler = error => {\r\n            this._request = undefined;\r\n            if (error._codeEquals(\"canceled\" /* CANCELED */)) {\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* ERROR */);\r\n            }\r\n        };\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n            this._start();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this._promise.then(null, () => { });\r\n    }\r\n    _makeProgressCallback() {\r\n        const sizeBefore = this._transferred;\r\n        return loaded => this._updateProgress(sizeBefore + loaded);\r\n    }\r\n    _shouldDoResumable(blob) {\r\n        return blob.size() > 256 * 1024;\r\n    }\r\n    _start() {\r\n        if (this._state !== \"running\" /* RUNNING */) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this._request !== undefined) {\r\n            return;\r\n        }\r\n        if (this._resumable) {\r\n            if (this._uploadUrl === undefined) {\r\n                this._createResumable();\r\n            }\r\n            else {\r\n                if (this._needToFetchStatus) {\r\n                    this._fetchStatus();\r\n                }\r\n                else {\r\n                    if (this._needToFetchMetadata) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this._fetchMetadata();\r\n                    }\r\n                    else {\r\n                        this._continueUpload();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._oneShotUpload();\r\n        }\r\n    }\r\n    _resolveToken(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.all([\r\n            this._ref.storage._getAuthToken(),\r\n            this._ref.storage._getAppCheckToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            switch (this._state) {\r\n                case \"running\" /* RUNNING */:\r\n                    callback(authToken, appCheckToken);\r\n                    break;\r\n                case \"canceling\" /* CANCELING */:\r\n                    this._transition(\"canceled\" /* CANCELED */);\r\n                    break;\r\n                case \"pausing\" /* PAUSING */:\r\n                    this._transition(\"paused\" /* PAUSED */);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    // TODO(andysoto): assert false\r\n    _createResumable() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const createRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\r\n            this._request = createRequest;\r\n            createRequest.getPromise().then((url) => {\r\n                this._request = undefined;\r\n                this._uploadUrl = url;\r\n                this._needToFetchStatus = false;\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _fetchStatus() {\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\r\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\r\n            this._request = statusRequest;\r\n            statusRequest.getPromise().then(status => {\r\n                status = status;\r\n                this._request = undefined;\r\n                this._updateProgress(status.current);\r\n                this._needToFetchStatus = false;\r\n                if (status.finalized) {\r\n                    this._needToFetchMetadata = true;\r\n                }\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _continueUpload() {\r\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            let requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\r\n            }\r\n            catch (e) {\r\n                this._error = e;\r\n                this._transition(\"error\" /* ERROR */);\r\n                return;\r\n            }\r\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\r\n            this._request = uploadRequest;\r\n            uploadRequest.getPromise().then((newStatus) => {\r\n                this._increaseMultiplier();\r\n                this._request = undefined;\r\n                this._updateProgress(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    this._metadata = newStatus.metadata;\r\n                    this._transition(\"success\" /* SUCCESS */);\r\n                }\r\n                else {\r\n                    this.completeTransitions_();\r\n                }\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _increaseMultiplier() {\r\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        // Max chunk size is 32M.\r\n        if (currentSize < 32 * 1024 * 1024) {\r\n            this._chunkMultiplier *= 2;\r\n        }\r\n    }\r\n    _fetchMetadata() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\r\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\r\n            this._request = metadataRequest;\r\n            metadataRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._transition(\"success\" /* SUCCESS */);\r\n            }, this._metadataErrorHandler);\r\n        });\r\n    }\r\n    _oneShotUpload() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\r\n            this._request = multipartRequest;\r\n            multipartRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._updateProgress(this._blob.size());\r\n                this._transition(\"success\" /* SUCCESS */);\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _updateProgress(transferred) {\r\n        const old = this._transferred;\r\n        this._transferred = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this._transferred !== old) {\r\n            this._notifyObservers();\r\n        }\r\n    }\r\n    _transition(state) {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case \"canceling\" /* CANCELING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                break;\r\n            case \"pausing\" /* PAUSING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                break;\r\n            case \"running\" /* RUNNING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                const wasPaused = this._state === \"paused\" /* PAUSED */;\r\n                this._state = state;\r\n                if (wasPaused) {\r\n                    this._notifyObservers();\r\n                    this._start();\r\n                }\r\n                break;\r\n            case \"paused\" /* PAUSED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"canceled\" /* CANCELED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._error = canceled();\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"error\" /* ERROR */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"success\" /* SUCCESS */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n        }\r\n    }\r\n    completeTransitions_() {\r\n        switch (this._state) {\r\n            case \"pausing\" /* PAUSING */:\r\n                this._transition(\"paused\" /* PAUSED */);\r\n                break;\r\n            case \"canceling\" /* CANCELING */:\r\n                this._transition(\"canceled\" /* CANCELED */);\r\n                break;\r\n            case \"running\" /* RUNNING */:\r\n                this._start();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * A snapshot of the current task state.\r\n     */\r\n    get snapshot() {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        return {\r\n            bytesTransferred: this._transferred,\r\n            totalBytes: this._blob.size(),\r\n            state: externalState,\r\n            metadata: this._metadata,\r\n            task: this,\r\n            ref: this._ref\r\n        };\r\n    }\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\r\n    on(type, nextOrObserver, error, completed) {\r\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\r\n        this._addObserver(observer);\r\n        return () => {\r\n            this._removeObserver(observer);\r\n        };\r\n    }\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this._promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    _addObserver(observer) {\r\n        this._observers.push(observer);\r\n        this._notifyObserver(observer);\r\n    }\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    _removeObserver(observer) {\r\n        const i = this._observers.indexOf(observer);\r\n        if (i !== -1) {\r\n            this._observers.splice(i, 1);\r\n        }\r\n    }\r\n    _notifyObservers() {\r\n        this._finishPromise();\r\n        const observers = this._observers.slice();\r\n        observers.forEach(observer => {\r\n            this._notifyObserver(observer);\r\n        });\r\n    }\r\n    _finishPromise() {\r\n        if (this._resolve !== undefined) {\r\n            let triggered = true;\r\n            switch (taskStateFromInternalTaskState(this._state)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this._resolve.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    const toCall = this._reject;\r\n                    async(toCall.bind(null, this._error))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this._resolve = undefined;\r\n                this._reject = undefined;\r\n            }\r\n        }\r\n    }\r\n    _notifyObserver(observer) {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    resume() {\r\n        const valid = this._state === \"paused\" /* PAUSED */ ||\r\n            this._state === \"pausing\" /* PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"running\" /* RUNNING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    pause() {\r\n        const valid = this._state === \"running\" /* RUNNING */;\r\n        if (valid) {\r\n            this._transition(\"pausing\" /* PAUSING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    cancel() {\r\n        const valid = this._state === \"running\" /* RUNNING */ ||\r\n            this._state === \"pausing\" /* PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"canceling\" /* CANCELING */);\r\n        }\r\n        return valid;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nclass Reference {\r\n    constructor(_service, location) {\r\n        this._service = _service;\r\n        if (location instanceof Location) {\r\n            this._location = location;\r\n        }\r\n        else {\r\n            this._location = Location.makeFromUrl(location, _service.host);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    toString() {\r\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\r\n    }\r\n    _newRef(service, location) {\r\n        return new Reference(service, location);\r\n    }\r\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\r\n    get root() {\r\n        const location = new Location(this._location.bucket, '');\r\n        return this._newRef(this._service, location);\r\n    }\r\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\r\n    get bucket() {\r\n        return this._location.bucket;\r\n    }\r\n    /**\r\n     * The full path of this object.\r\n     */\r\n    get fullPath() {\r\n        return this._location.path;\r\n    }\r\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\r\n    get name() {\r\n        return lastComponent(this._location.path);\r\n    }\r\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\r\n    get storage() {\r\n        return this._service;\r\n    }\r\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\r\n    get parent() {\r\n        const newPath = parent(this._location.path);\r\n        if (newPath === null) {\r\n            return null;\r\n        }\r\n        const location = new Location(this._location.bucket, newPath);\r\n        return new Reference(this._service, location);\r\n    }\r\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\r\n    _throwIfRoot(name) {\r\n        if (this._location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytes');\r\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo)\r\n        .then(request => request.getPromise())\r\n        .then(finalMetadata => {\r\n        return {\r\n            metadata: finalMetadata,\r\n            ref\r\n        };\r\n    });\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytesResumable');\r\n    return new UploadTask(ref, new FbsBlob(data), metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\r\n    ref._throwIfRoot('uploadString');\r\n    const data = dataFromString(format, value);\r\n    const metadataClone = Object.assign({}, metadata);\r\n    if (metadataClone['contentType'] == null && data.contentType != null) {\r\n        metadataClone['contentType'] = data.contentType;\r\n    }\r\n    return uploadBytes$1(ref, data.data, metadataClone);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll$1(ref) {\r\n    const accumulator = {\r\n        prefixes: [],\r\n        items: []\r\n    };\r\n    return listAllHelper(ref, accumulator).then(() => accumulator);\r\n}\r\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\r\nasync function listAllHelper(ref, accumulator, pageToken) {\r\n    const opt = {\r\n        // maxResults is 1000 by default.\r\n        pageToken\r\n    };\r\n    const nextPage = await list$1(ref, opt);\r\n    accumulator.prefixes.push(...nextPage.prefixes);\r\n    accumulator.items.push(...nextPage.items);\r\n    if (nextPage.nextPageToken != null) {\r\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\r\n    }\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nasync function list$1(ref, options) {\r\n    if (options != null) {\r\n        if (typeof options.maxResults === 'number') {\r\n            validateNumber('options.maxResults', \r\n            /* minValue= */ 1, \r\n            /* maxValue= */ 1000, options.maxResults);\r\n        }\r\n    }\r\n    const op = options || {};\r\n    const requestInfo = list$2(ref.storage, ref._location, \r\n    /*delimiter= */ '/', op.pageToken, op.maxResults);\r\n    return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\r\nasync function getMetadata$1(ref) {\r\n    ref._throwIfRoot('getMetadata');\r\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\r\n    return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\r\nasync function updateMetadata$1(ref, metadata) {\r\n    ref._throwIfRoot('updateMetadata');\r\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\r\n    return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\r\n}\r\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nasync function getDownloadURL$1(ref) {\r\n    ref._throwIfRoot('getDownloadURL');\r\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\r\n    return (await ref.storage.makeRequestWithTokens(requestInfo))\r\n        .getPromise()\r\n        .then(url => {\r\n        if (url === null) {\r\n            throw noDownloadURL();\r\n        }\r\n        return url;\r\n    });\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nasync function deleteObject$1(ref) {\r\n    ref._throwIfRoot('deleteObject');\r\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\r\n    return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\r\n}\r\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\r\nfunction _getChild$1(ref, childPath) {\r\n    const newPath = child(ref._location.path, childPath);\r\n    const location = new Location(ref._location.bucket, newPath);\r\n    return new Reference(ref.storage, location);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\r\nfunction refFromURL(service, url) {\r\n    return new Reference(service, url);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\r\nfunction refFromPath(ref, path) {\r\n    if (ref instanceof FirebaseStorageImpl) {\r\n        const service = ref;\r\n        if (service._bucket == null) {\r\n            throw noDefaultBucket();\r\n        }\r\n        const reference = new Reference(service, service._bucket);\r\n        if (path != null) {\r\n            return refFromPath(reference, path);\r\n        }\r\n        else {\r\n            return reference;\r\n        }\r\n    }\r\n    else {\r\n        // ref is a Reference\r\n        if (path !== undefined) {\r\n            return _getChild$1(ref, path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    }\r\n}\r\nfunction ref$1(serviceOrRef, pathOrUrl) {\r\n    if (pathOrUrl && isUrl(pathOrUrl)) {\r\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\r\n            return refFromURL(serviceOrRef, pathOrUrl);\r\n        }\r\n        else {\r\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\r\n        }\r\n    }\r\n    else {\r\n        return refFromPath(serviceOrRef, pathOrUrl);\r\n    }\r\n}\r\nfunction extractBucket(host, config) {\r\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\r\n    if (bucketString == null) {\r\n        return null;\r\n    }\r\n    return Location.makeFromBucketSpec(bucketString, host);\r\n}\r\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\r\n    storage.host = `${host}:${port}`;\r\n    storage._protocol = 'http';\r\n    const { mockUserToken } = options;\r\n    if (mockUserToken) {\r\n        storage._overrideAuthToken =\r\n            typeof mockUserToken === 'string'\r\n                ? mockUserToken\r\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\r\n    }\r\n}\r\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\r\nclass FirebaseStorageImpl {\r\n    constructor(\r\n    /**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */\r\n    app, _authProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _appCheckProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _pool, _url, _firebaseVersion) {\r\n        this.app = app;\r\n        this._authProvider = _authProvider;\r\n        this._appCheckProvider = _appCheckProvider;\r\n        this._pool = _pool;\r\n        this._url = _url;\r\n        this._firebaseVersion = _firebaseVersion;\r\n        this._bucket = null;\r\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */\r\n        this._host = DEFAULT_HOST;\r\n        this._protocol = 'https';\r\n        this._appId = null;\r\n        this._deleted = false;\r\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\r\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\r\n        this._requests = new Set();\r\n        if (_url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(this._host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(host) {\r\n        this._host = host;\r\n        if (this._url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\r\n    get maxUploadRetryTime() {\r\n        return this._maxUploadRetryTime;\r\n    }\r\n    set maxUploadRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxUploadRetryTime = time;\r\n    }\r\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\r\n    get maxOperationRetryTime() {\r\n        return this._maxOperationRetryTime;\r\n    }\r\n    set maxOperationRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxOperationRetryTime = time;\r\n    }\r\n    async _getAuthToken() {\r\n        if (this._overrideAuthToken) {\r\n            return this._overrideAuthToken;\r\n        }\r\n        const auth = this._authProvider.getImmediate({ optional: true });\r\n        if (auth) {\r\n            const tokenData = await auth.getToken();\r\n            if (tokenData !== null) {\r\n                return tokenData.accessToken;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async _getAppCheckToken() {\r\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\r\n        if (appCheck) {\r\n            const result = await appCheck.getToken();\r\n            // TODO: What do we want to do if there is an error getting the token?\r\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\r\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    _delete() {\r\n        if (!this._deleted) {\r\n            this._deleted = true;\r\n            this._requests.forEach(request => request.cancel());\r\n            this._requests.clear();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\r\n    _makeStorageReference(loc) {\r\n        return new Reference(this, loc);\r\n    }\r\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\r\n    _makeRequest(requestInfo, authToken, appCheckToken) {\r\n        if (!this._deleted) {\r\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, this._pool, this._firebaseVersion);\r\n            this._requests.add(request);\r\n            // Request removes itself from set when complete.\r\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    }\r\n    async makeRequestWithTokens(requestInfo) {\r\n        const [authToken, appCheckToken] = await Promise.all([\r\n            this._getAuthToken(),\r\n            this._getAppCheckToken()\r\n        ]);\r\n        return this._makeRequest(requestInfo, authToken, appCheckToken);\r\n    }\r\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.8.3\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytes$1(ref, data, metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString(ref, value, format, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadString$1(ref, value, format, metadata);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytesResumable$1(ref, data, metadata);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\r\nfunction getMetadata(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getMetadata$1(ref);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\r\nfunction updateMetadata(ref, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return updateMetadata$1(ref, metadata);\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list(ref, options) {\r\n    ref = getModularInstance(ref);\r\n    return list$1(ref, options);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll(ref) {\r\n    ref = getModularInstance(ref);\r\n    return listAll$1(ref);\r\n}\r\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getDownloadURL$1(ref);\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject(ref) {\r\n    ref = getModularInstance(ref);\r\n    return deleteObject$1(ref);\r\n}\r\nfunction ref(serviceOrRef, pathOrUrl) {\r\n    serviceOrRef = getModularInstance(serviceOrRef);\r\n    return ref$1(serviceOrRef, pathOrUrl);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction _getChild(ref, childPath) {\r\n    return _getChild$1(ref, childPath);\r\n}\r\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\r\nfunction getStorage(app = getApp(), bucketUrl) {\r\n    app = getModularInstance(app);\r\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\r\n    const storageInstance = storageProvider.getImmediate({\r\n        identifier: bucketUrl\r\n    });\r\n    return storageInstance;\r\n}\r\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\r\nfunction connectStorageEmulator(storage, host, port, options = {}) {\r\n    connectStorageEmulator$1(storage, host, port, options);\r\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    const app = container.getProvider('app').getImmediate();\r\n    const authProvider = container.getProvider('auth-internal');\r\n    const appCheckProvider = container.getProvider('app-check-internal');\r\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, new ConnectionPool(), url, SDK_VERSION);\r\n}\r\nfunction registerStorage() {\r\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version);\r\n}\r\nregisterStorage();\n\nexport { StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getDownloadURL, getMetadata, getStorage, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n"]},"metadata":{},"sourceType":"module"}